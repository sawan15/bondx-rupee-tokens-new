openapi: 3.0.3
info:
  title: Bond Exchange - Wallet API
  description: API endpoints for wallet management, deposits, withdrawals, and transaction history
  version: 1.0.0
  contact:
    name: Bond Exchange Team
    email: support@bondexchange.com

servers:
  - url: https://ff616ef0fdef.ngrok-free.app/api
    description: Production API (Ngrok Tunnel)
  - url: http://localhost:8080/api
    description: Local Development API

paths:
  /user/wallet/:
    get:
      tags:
        - Wallet
      summary: Get User Wallet
      description: Retrieve user's wallet balance and transaction capabilities
      parameters:
        - name: user_id
          in: query
          required: true
          description: Unique identifier for the user
          schema:
            type: string
            example: "6883c9087ada069168474cb6"
        - name: ngrok-skip-browser-warning
          in: header
          required: false
          description: Skip ngrok browser warning page
          schema:
            type: string
            enum: ["true"]
            example: "true"
      responses:
        '200':
          description: Wallet data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
              examples:
                empty_wallet:
                  summary: Empty Wallet (New User)
                  value:
                    status_code: 200
                    status: "success"
                    message: "Wallet data retrieved"
                    data:
                      balance: "0"
                      blocked_amount: "0"
                      available: "0"
                      total_deposited: "0"
                      max_deposit_limit: "1000000"
                funded_wallet:
                  summary: Funded Wallet
                  value:
                    status_code: 200
                    status: "success"
                    message: "Wallet data retrieved"
                    data:
                      balance: "50000"
                      blocked_amount: "5000"
                      available: "45000"
                      total_deposited: "50000"
                      max_deposit_limit: "1000000"
        '400':
          description: Bad Request - Missing or invalid user_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status_code: 400
                status: "error"
                message: "user_id parameter is required"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status_code: 404
                status: "error"
                message: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status_code: 500
                status: "error"
                message: "Internal server error"

  /user/wallet/deposit:
    post:
      tags:
        - Wallet
      summary: Deposit Funds
      description: Add funds to user's wallet (Note - Currently has decimal validation issues in prototype)
      parameters:
        - name: ngrok-skip-browser-warning
          in: header
          required: false
          description: Skip ngrok browser warning page
          schema:
            type: string
            enum: ["true"]
            example: "true"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
            examples:
              small_deposit:
                summary: Small Deposit
                value:
                  user_id: "6883c9087ada069168474cb6"
                  amount: "1000"
                  payment_method: "UPI"
                  transaction_reference: "UPI123456789"
              large_deposit:
                summary: Large Deposit
                value:
                  user_id: "6883c9087ada069168474cb6"
                  amount: "50000"
                  payment_method: "Bank Transfer"
                  transaction_reference: "NEFT202501234567"
      responses:
        '200':
          description: Deposit successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositResponse'
              example:
                status_code: 200
                status: "success"
                message: "Deposit successful"
                data:
                  transaction_id: "TXN_DEP_20250125_001"
                  amount: "1000"
                  new_balance: "51000"
                  deposit_time: "2025-01-25T10:30:00Z"
        '400':
          description: Bad Request - Invalid deposit data or amount exceeds limits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_amount:
                  summary: Invalid Amount
                  value:
                    status_code: 400
                    status: "error"
                    message: "Invalid deposit amount. Minimum deposit is ₹100"
                limit_exceeded:
                  summary: Deposit Limit Exceeded
                  value:
                    status_code: 400
                    status: "error"
                    message: "Deposit amount exceeds maximum limit of ₹10,00,000"
                decimal_validation_error:
                  summary: Decimal Validation Issue (Known Prototype Issue)
                  value:
                    status_code: 400
                    status: "error"
                    message: "Decimal validation error - prototype limitation"
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status_code: 422
                status: "error"
                message: "Validation failed: amount must be a positive number"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status_code: 500
                status: "error"
                message: "Payment processing failed"

  /user/transactions:
    get:
      tags:
        - Wallet
      summary: Get Transaction History
      description: Retrieve user's transaction history (Planned - Not yet implemented)
      parameters:
        - name: user_id
          in: query
          required: true
          description: Unique identifier for the user
          schema:
            type: string
            example: "6883c9087ada069168474cb6"
        - name: limit
          in: query
          required: false
          description: Number of transactions to return (default 50)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
            example: 20
        - name: offset
          in: query
          required: false
          description: Number of transactions to skip (for pagination)
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
        - name: type
          in: query
          required: false
          description: Filter by transaction type
          schema:
            type: string
            enum: ["deposit", "withdrawal", "purchase", "sale", "coupon"]
            example: "deposit"
        - name: ngrok-skip-browser-warning
          in: header
          required: false
          description: Skip ngrok browser warning page
          schema:
            type: string
            enum: ["true"]
            example: "true"
      responses:
        '200':
          description: Transaction history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHistoryResponse'
        '501':
          description: Not Implemented - Feature planned for future release
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status_code: 501
                status: "error"
                message: "Transaction history endpoint not yet implemented"

  /user/wallet/withdraw:
    post:
      tags:
        - Wallet
      summary: Withdraw Funds
      description: Withdraw funds from user's wallet (Planned - Not yet implemented)
      parameters:
        - name: ngrok-skip-browser-warning
          in: header
          required: false
          description: Skip ngrok browser warning page
          schema:
            type: string
            enum: ["true"]
            example: "true"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequest'
      responses:
        '200':
          description: Withdrawal successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithdrawResponse'
        '501':
          description: Not Implemented - Feature planned for future release
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status_code: 501
                status: "error"
                message: "Withdrawal endpoint not yet implemented"

components:
  schemas:
    WalletResponse:
      type: object
      properties:
        status_code:
          type: integer
          example: 200
        status:
          type: string
          enum: ["success", "error"]
          example: "success"
        message:
          type: string
          example: "Wallet data retrieved"
        data:
          $ref: '#/components/schemas/WalletData'

    WalletData:
      type: object
      required:
        - balance
        - blocked_amount
        - available
        - total_deposited
        - max_deposit_limit
      properties:
        balance:
          type: string
          description: "Total wallet balance (decimal string)"
          example: "50000"
        blocked_amount:
          type: string
          description: "Amount blocked in pending orders (decimal string)"
          example: "5000"
        available:
          type: string
          description: "Available amount for trading (decimal string)"
          example: "45000"
        total_deposited:
          type: string
          description: "Total amount deposited to date (decimal string)"
          example: "50000"
        max_deposit_limit:
          type: string
          description: "Maximum deposit limit (₹10 lakh) (decimal string)"
          example: "1000000"

    DepositRequest:
      type: object
      required:
        - user_id
        - amount
        - payment_method
      properties:
        user_id:
          type: string
          description: "Unique identifier for the user"
          example: "6883c9087ada069168474cb6"
        amount:
          type: string
          description: "Deposit amount (decimal string)"
          example: "1000"
        payment_method:
          type: string
          description: "Payment method used"
          enum: ["UPI", "Bank Transfer", "Debit Card", "Credit Card"]
          example: "UPI"
        transaction_reference:
          type: string
          description: "Payment gateway transaction reference"
          example: "UPI123456789"
        notes:
          type: string
          description: "Optional notes for the deposit"
          example: "Monthly investment"

    DepositResponse:
      type: object
      properties:
        status_code:
          type: integer
          example: 200
        status:
          type: string
          enum: ["success", "error"]
          example: "success"
        message:
          type: string
          example: "Deposit successful"
        data:
          $ref: '#/components/schemas/DepositData'

    DepositData:
      type: object
      properties:
        transaction_id:
          type: string
          description: "Unique transaction identifier"
          example: "TXN_DEP_20250125_001"
        amount:
          type: string
          description: "Deposited amount (decimal string)"
          example: "1000"
        new_balance:
          type: string
          description: "New wallet balance after deposit (decimal string)"
          example: "51000"
        deposit_time:
          type: string
          format: date-time
          description: "Timestamp of the deposit"
          example: "2025-01-25T10:30:00Z"

    WithdrawRequest:
      type: object
      required:
        - user_id
        - amount
        - bank_account_id
      properties:
        user_id:
          type: string
          description: "Unique identifier for the user"
          example: "6883c9087ada069168474cb6"
        amount:
          type: string
          description: "Withdrawal amount (decimal string)"
          example: "5000"
        bank_account_id:
          type: string
          description: "User's bank account ID for withdrawal"
          example: "BANK_ACC_001"
        notes:
          type: string
          description: "Optional notes for the withdrawal"
          example: "Emergency withdrawal"

    WithdrawResponse:
      type: object
      properties:
        status_code:
          type: integer
          example: 200
        status:
          type: string
          enum: ["success", "error"]
          example: "success"
        message:
          type: string
          example: "Withdrawal initiated successfully"
        data:
          $ref: '#/components/schemas/WithdrawData'

    WithdrawData:
      type: object
      properties:
        transaction_id:
          type: string
          description: "Unique transaction identifier"
          example: "TXN_WTH_20250125_001"
        amount:
          type: string
          description: "Withdrawal amount (decimal string)"
          example: "5000"
        new_balance:
          type: string
          description: "New wallet balance after withdrawal (decimal string)"
          example: "45000"
        processing_time:
          type: string
          description: "Expected processing time"
          example: "1-3 business days"
        withdrawal_time:
          type: string
          format: date-time
          description: "Timestamp of the withdrawal request"
          example: "2025-01-25T14:30:00Z"

    TransactionHistoryResponse:
      type: object
      properties:
        status_code:
          type: integer
          example: 200
        status:
          type: string
          enum: ["success", "error"]
          example: "success"
        message:
          type: string
          example: "Transaction history retrieved"
        data:
          $ref: '#/components/schemas/TransactionHistoryData'

    TransactionHistoryData:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Transaction:
      type: object
      properties:
        transaction_id:
          type: string
          example: "TXN_DEP_20250125_001"
        type:
          type: string
          enum: ["deposit", "withdrawal", "purchase", "sale", "coupon"]
          example: "deposit"
        amount:
          type: string
          description: "Transaction amount (decimal string)"
          example: "1000"
        balance_after:
          type: string
          description: "Wallet balance after transaction (decimal string)"
          example: "51000"
        description:
          type: string
          example: "UPI Deposit"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-25T10:30:00Z"
        status:
          type: string
          enum: ["completed", "pending", "failed", "cancelled"]
          example: "completed"
        reference:
          type: string
          description: "External reference (payment gateway, bond symbol, etc.)"
          example: "UPI123456789"

    Pagination:
      type: object
      properties:
        total:
          type: integer
          description: "Total number of transactions"
          example: 156
        limit:
          type: integer
          description: "Number of transactions per page"
          example: 50
        offset:
          type: integer
          description: "Number of transactions skipped"
          example: 0
        has_more:
          type: boolean
          description: "Whether more transactions are available"
          example: true

    ErrorResponse:
      type: object
      properties:
        status_code:
          type: integer
          example: 400
        status:
          type: string
          enum: ["error"]
          example: "error"
        message:
          type: string
          example: "Error description"
        errors:
          type: array
          description: "Detailed validation errors (optional)"
          items:
            type: object
            properties:
              field:
                type: string
                example: "amount"
              message:
                type: string
                example: "Amount must be greater than 0"

tags:
  - name: Wallet
    description: Wallet balance management, deposits, withdrawals, and transaction history 